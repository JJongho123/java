

	Collection (컬렉션)
	
	:자바에서는 많은 수의 다양한 패키지를 제공하여
	개발자들이 자바 어플리케이션을 쉽게 개발할수 있도록 도와줍니다.
	
	Collection Framework (컬렉션 프레임워크)
	
	:다수의 데이터를 쉽게 처리할수 있는 표준화된 방법을 제공하는 클래스
	
	형식화 클래스: 데이터를 표준화된 형식으로 출력하는데 도움을 주는 클래스
	
	:컬렉션 프레임워크란 데이터군을 저장하는 (Vector 와 같은) 클래스들을 표준화한 
	설계를 뜻한다.
	
	Collection 은 다수의 데이터 즉 데이터 그룹을 Framework 은 표준화된 
	프로그래밍 방식을 의미한다.
	
	Java API 문서에서는 컬렉션 프레임웍을 데이터 군을 다루고 표현하기 위한
	단일화된 구조라고 정의하고 있다.
	
	자바에서 컬렉션 프레임워크란 다수의 데이터를 쉽고 효과적으로
	처리할 수 있는 표준화된 방법을 제공하는 클래스의 집합을 의미합니다.
	
	즉, 데이터를 저장하는 자료구조와 데이터를 처리하는 알고리즘을 구조화 하여 클래스로 구현해 놓은것입니다.
	이러한 컬렉션 프레임 워크는 자바의 인터페이스를 사용하여 구현됩니다. 
	
	컬렉션 프레임웍의 핵심 인터페이스
	
			Collection 
			|			|				Map
			List		Set
			
		:List 와 Set 을 구현한 컬렉션 클래스 들은 서로 공통점이 많아 공통된 부분을
		다시 뽑아 Collection 인터페이스를 정의 할수 있었지만 Map 인터페이스는 
		이들과는 전혀 다른 형태로 컬렉션을 다루기 때문에
		같은 상속 계층도에 포함되지 못하였다.
		
		인터페이스					특징
		
		List				순서가 있는 데이터의 집합 , 데이터중복을 허용한다.
							Ex] 대기자 명단
							클래스 => AraayList , LinkedList, Stack , Vector...
							
		
		Set 				순서가 없는 데이터의 집합, 데이터 중복을 허용하지 않는다.
							Ex] 양의 정수집합, 소수의 집합
							클래스 => HashSet , TreeSet
							
		Map					Key 와 Value 의 쌍으로 이루어진 데이터의 집합
							순서는 유지되지않으며 , 키는 중복을 허용하지않고 값은
							중복을 허용한다.
							
							Ex] 우편번호 , 지역번호(전화번호)
							클래스 => HashMap , TreeMap , HashTable , Properties
							
		
		Vector 와 ArrayList
		
		:Vector 와 ArrayList 는 컬렉션 프레임웍에서 가장 많이 사용되는 컬렉션 클래스 입니다.
		이들은 List 인터페이스를 구현하기 때문에 데이터의 저장순서가 유지되고
		중복을 허용한다는 공통적인 특징을 갖는다.
		
		ArrayList 는 기존의 Vector 를 개선한 것이고 Vector 와 구현원리와 기능적인
		측면에서 동일하다고 할수 있다.
		
		공통점											차이점
		
		List 인터페이스를구현한다					Vector 는 멀티스레드에 대한 동기화가 
		저장순서가 유지되고 중복을 허용한다.			되어 있으나 ArrayList 는 동기화 X
		데이터의 저장공간으로 배열을 사용한다.
		
		Iterator 
		
		:컬렉션 프레임웍 에서는 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화하였다.
		컬렉션에 저장된 각요소에 접근하는 기능을 가진 Iterator 인터페이스를 
		정의하고 Collection 인터페이스에는 Iterator 를 반환하는 iterator() 메서드를 
		정의하고 있다. 
		iterator() 는 Collection 인터페이스에 정의된 메서드 이므로 
		Collection 인터페이스의 자손인 List , Set 에도 포함되어 잇다.
		
		메서드						설명	
		
		boolean hasNext()		읽어올 요소가 남아있는지 확인한다. 있으면 true,
														없으면 false
		Object next()			다음 요소를 읽어온다. next() 를 호출하기 전에
								hasNext() 를 호출해서 읽어올 요소가 있는지 확인한다.
								
		void remove() 			next() 로 읽어온 요소를 삭제한다.
								next() 를 호출한 다음에 remove() 를 호출한다.														
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		 	
		