Exception Handling ( 예외처리 )

	:대부분의 프로그램에서는 에러가 발생하기 마련입니다.
	그렇기 때문에 프로그램에는 다양한 에러에 대처할수 있는 
	기능을 구현해야 합니다. 만약 에러에 대처하는 기능이 없다면 프로그램이
	비정상적으로 동작하거나 종료하게 됩니다.
	이처럼 프로그램이 정상적으로 실행되는데 방해가 되는 에러들을
	Exception (예외) 라고 말합니다
	
	이를 발생하는 시점에 따라서 Compile time Error 와 Run Time Error 로 
	나눌수 있는데 컴파일 에러는 컴파일 할때 발생하는 에러이고 
	런타임 에러는 실행도중에 발생하는 에러를 말합니다.
	
	자바에서는 실행시(runtime) 발생하는 프로그램 오류를
	error(에러) 와 exception(예외) 로 구분하여 처리합니다.
	
	error 는 OutofMemoryError(메모리부족),
			StackOverFlowError(스텍 오버플로우 에러) 와 같이 일단 발생하면 복구할수 없는 심각한 오류
			
	exception는 발생하더라도 프로그래머가 이에대한 적절한 코드를 미리
			작성하여 프로그램의 비정상적인 종료를 막는것을 말한다.
			프로그램 코드에 의해 수습될수 있는 다소 미약한 오류
			
	예외처리의 목적
	: 프로그램의 실행도중에 발생하는 에러는 어쩔수 없으니 예외는
	프로그래머가 이에 대한 처리를 미리 해주어야합니다.
	
	exception handling 이란 프로그램 실행시 발생할수 있는 예기치 못한 
	예외발생을 대비한 코드를 작성하는 것이며 예외처리 목적은
	예외의 발생으로 인한 실행중인 프로그램의 갑작스런 비정상 종료를 막고
	정상적인 실행상태를 유지할수 있도록 하는것이다.
	
	exception handling 정의 : 프로그램 실행시 발생할수 있는 예외의 발생에 대비한 코드를 작성하는것
	
	exception handling 목적 : 프로그램의 비정상 종료를 막고 정상적인 실행상태를 유지할수 있도록 하는것이다.
	
	자바에서 프로그램을 실행하는 도중에 발생하는 오류를 
	error 와 exception 으로 구분하고 
	exception은 예외처리를 사용해 해결할 수 있는 오류이고 
	error 는 exception 에 비해 심각한 오류이고 대처할수 없는 오류를 말합니다.
	
	결국 exception 은 처리가능한 오류
	error 은 처리 불가능한 오류라고 말할수 있습니다.
	
	예를들어 코드를 작성하다가 실수로 지운 코드는 ctrl + Z 로 되살릴수있습니다.
	하지만 컴퓨터 전원이 꺼지면 저장하지 않은 데이터는 사라집니다.
	여기서 ctrl + Z 로 되살릴수 있는 오류를 처리가능한 오류라고 말합니다.
	
	자바에서 예외처리는 처리가능한 오류 즉 예외가 발생했을때 그 예외에 대한
	대처방법을 제시하는 것을 의미합니다.
	
	예를들어 정수를 0 으로 나누는경우 , 배열의 범위가 잘못되었을경우, 
	파일 입출력 등이있습니다.
	
	자바 JVM 에서 예외에 관련된 다양한 처리를 해줍니다.
	자바에서 발생할수 있는 예외는  java.lang 패키지에 예외 관련 클래스를 제공하고 있으며 자바의 모든 예외 관련 클래스는 
	java.lnag.Throwable 클래스의 하위클래스로 정의되어 있습니다.
	
	-프로그램은 특정한 작업을 처리하기위한 명령 코드로 구성되어 있습니다.
	
	명령어를 처리하다가 문제가 발생하면 그문제에 대처하기 위한 예외처리가 필요합니다.
	그런데 명령과 예외처리 구문이 뒤 섞여있으면 프로그램이 복잡해 집니다
	이와 같은 문제를 해결하기위해 try ~ catch ~ finally 구문을 사용합니다.
	
	즉 try ~ catch ~ finally 는 특정한 동작을 지시하는 명령과 예외처리 코드를 분리시켜 처리하기 위한 키워드 입니다.
	
	try {
	... // 예외 발생가능한 구문
	}
	
	catch(예외타입 매개변수)
	{
	... // 예외가 발생하면 처리할 구문
	}
	
	finally {
	... // 예외 발생과 상관없이 무조건 처리할 구문
	}
	
	- Exception class
	
		RuntimeException : 실행시간에 발생한 예외처리
		IoException : 입출력에 관련된 예외처리
		NoSuchMethodException : 메서드를 찾을수 없을때 예외 처리
		InterruptedException : 인터럽트에 관련된 예외처리
		ClassNotFoundException : 클래스를 찾을수 없을떄 예외처리
		
		try{} catch{} 블럭 사용시 주의사항
		
		-Exception 클래스는 처리가능한 예외 클래스 중에서
		최상위 클래스 입니다. Exception 클래스는 모든 예외 상황을 
		포괄하고 있기 때문에 여러가지 예외를 하나로 처리하고싶다면
		
		try {
			} 	catch(Exception e) {} 처럼 사용하면 됩니다.
			
		만약 catch(){} 구문을 2개이상 쓰고자 한다면 
		예외 클래스의 계층 구조를 생각해야 합니다.
		만약 상위 계층의 클래스가 앞에 나오면 에러가 
		발생합니다.
		그이유는 상위에 있는 예외 클래스 일수록 많은 범위를 포괄하기 때문에 하위
		catch{} 구문으로 내려갈수 없기 때문입니다.
		
	throw  &   throws 
	
		: throw 는 예외를 고의적으로 발생시킬때 사용하는 키워드 입니다.
		
		사용형식 
			
			throw new 예외클래스 생성자
			
		:throws
		
		- 프로그램을 작성할때 발생가능한 모든 예외를 찾아서 처리해야 합니다.
		하지만 예외를 처리하기 곤란한 경우도 있습니다.
		이럴때는 자신을 호출한 다른 메서드나 JVM (자바가상머신)에게
		예외처리를 미룰수도 있습니다.
		throws  키워드는 예외처리를 다른 쪽으로 떠넘기는 역할을 합니다.
		
		형식
		
		public void 메서드이름 (매개변수) throws 예외클래스1 [,예외클래스2,,,]
		{
		
		}
		
		사용자 정의 예외 클래스 만들기
		
			자바의 여러개의 예외클래스를 지원합니다.
			하지만 사용자도 Exception 클래스를 상속받아 사용자가 임의로 
			예외클래스를 만들수 있습니다.
			
		
		사용자 정의 예외 클래스 형식
		
		class 사용자 정의 예외클래스 extends Exception 
				{
					public 사용자 정의 예외클래스 (String str)
						{
							super(str); 	// Exception  클래스 생성자 호출
							...;
						}
					....;
				}
				
							
							
							
							
							
							
							
							
							
							
							
							
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
	